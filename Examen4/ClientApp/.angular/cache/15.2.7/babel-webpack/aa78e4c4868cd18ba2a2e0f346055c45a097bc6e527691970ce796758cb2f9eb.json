{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventosService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.apiURL = this.baseUrl + \"eventos\";\n  }\n  // Método para obtener eventos\n  getEventos() {\n    return this.http.get(this.apiURL);\n  }\n  getEvento(eventoId) {\n    let params = new HttpParams().set('incluirParticipantes', \"true\");\n    return this.http.get(this.apiURL + '/' + eventoId, {\n      params: params\n    });\n  }\n  createEvento(evento) {\n    return this.http.post(this.apiURL, evento);\n  }\n  // solo para actualizar participantes\n  updateEvento(evento) {\n    return this.http.put(this.apiURL + \"/\" + evento.id.toString(), evento);\n  }\n}\nEventosService.ɵfac = function EventosService_Factory(t) {\n  return new (t || EventosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nEventosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventosService,\n  factory: EventosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAQ7D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAFjE,WAAM,GAAG,IAAI,CAACA,OAAO,GAAG,SAAS;EAE6C;EAEtF;EACAC,UAAU;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC;EAC9C;EAEAC,SAAS,CAACC,QAAgB;IACxB,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAACW,GAAG,CAAC,sBAAsB,EAAC,MAAM,CAAC;IAChE,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAU,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGE,QAAQ,EAAE;MAAEC,MAAM,EAAEA;IAAM,CAAC,CAAC;EAChF;EAEAE,YAAY,CAACC,MAAe;IAC1B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,IAAI,CAACP,MAAM,EAAEM,MAAM,CAAC;EACrD;EACA;EACAE,YAAY,CAACF,MAAc;IACzB,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAU,IAAI,CAACT,MAAM,GAAC,GAAG,GAACM,MAAM,CAACI,EAAE,CAACC,QAAQ,EAAE,EAACL,MAAM,CAAC;EAC5E;;AArBWZ,cAAc;mBAAdA,cAAc,0CAGqB,UAAU;AAAA;AAH7CA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["HttpParams","EventosService","constructor","http","baseUrl","getEventos","get","apiURL","getEvento","eventoId","params","set","createEvento","evento","post","updateEvento","put","id","toString","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\parcialTallerFinal-82963dae152877c7e3c980bd0dc22f8399fae692\\Examen4\\ClientApp\\src\\app\\eventos\\eventos.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { IEvento } from './Evento';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventosService {\n  private apiURL = this.baseUrl + \"eventos\"\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string ) { }\n\n  // Método para obtener eventos\n  getEventos(): Observable<IEvento[]> {\n    return this.http.get<IEvento[]>(this.apiURL);\n  }\n\n  getEvento(eventoId: string): Observable<IEvento>{\n    let params = new HttpParams().set('incluirParticipantes',\"true\")\n    return this.http.get<IEvento>(this.apiURL + '/' + eventoId, { params: params})\n  }\n\n  createEvento(evento: IEvento):Observable<IEvento>{\n    return this.http.post<IEvento>(this.apiURL, evento)\n  }\n  // solo para actualizar participantes\n  updateEvento(evento:IEvento):Observable<IEvento>{\n    return this.http.put<IEvento>(this.apiURL+\"/\"+evento.id.toString(),evento);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}